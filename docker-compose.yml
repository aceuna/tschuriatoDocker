version: '3'
 
services:
  rabbitmq:
    image: rabbitmq:management
    ports:
      - "15672:15672"  # Management UI
      - "5672:5672"    # Message broker port
    environment:
      - RABBITMQ_DEFAULT_USER=stockmarket
      - RABBITMQ_DEFAULT_PASS=supersecret123
  publisher:
    image: aceuna/stock-publisher:latest
    depends_on:
      - rabbitmq
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=stockmarket
      - RABBITMQ_PASS=supersecret123
      - RABBITMQ_URL=amqp://stockmarket:supersecret123@rabbitmq:5672
    command: sh -c "until nc -z rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done; ./stock-publisher"
  consumer_AAPL:
    image: aceuna/consumer:latest
    depends_on:
      - rabbitmq
    environment:
      - MONGO_URI=mongodb://host.docker.internal:27017,host.docker.internal:27018,host.docker.internal:27019/?replicaSet=rs0
      - QUEUE_NAME=AAPL
      - RABBITMQ_URL=amqp://stockmarket:supersecret123@rabbitmq:5672/
    command: sh -c "until nc -z rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done; ./consumer"
  consumer_MSFT:
    image: aceuna/consumer:latest
    depends_on:
      - rabbitmq
    environment:
      - MONGO_URI=mongodb://host.docker.internal:27017,host.docker.internal:27018,host.docker.internal:27019/?replicaSet=rs0
      - QUEUE_NAME=MSFT
      - RABBITMQ_URL=amqp://stockmarket:supersecret123@rabbitmq:5672/
    command: sh -c "until nc -z rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done; ./consumer"
  consumer_TSLA:
    image: aceuna/consumer:latest
    depends_on:
      - rabbitmq
    environment:
      - MONGO_URI=mongodb://host.docker.internal:27017,host.docker.internal:27018,host.docker.internal:27019/?replicaSet=rs0
      - QUEUE_NAME=TSLA
      - RABBITMQ_URL=amqp://stockmarket:supersecret123@rabbitmq:5672/
    command: sh -c "until nc -z rabbitmq 5672; do echo waiting for rabbitmq; sleep 2; done; ./consumer"
  mongo1:
    image: mongo:7.0
    ports:
      - "27017:27017"
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    volumes:
      - ./DB/mongo1_data:/data/db
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017',priority:1},{_id:1,host:'host.docker.internal:27018',priority:0.5},{_id:2,host:'host.docker.internal:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      retries: 30
      start_period: 0s
      start_interval: 1s
  mongo2:
    image: mongo:7.0
    ports:
      - "27018:27018"
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all", "--port", "27018"]
    volumes:
      - ./DB/mongo2_data:/data/db
    extra_hosts:
      - "host.docker.internal:host-gateway"
  mongo3:
    image: mongo:7.0
    ports:
      - "27019:27019"
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all", "--port", "27019"]
    volumes:
      - ./DB/mongo3_data:/data/db
    extra_hosts:
      - "host.docker.internal:host-gateway"
  stock-liveview-master1:
    build: ./stock-liveview-master
    ports:
      - "3000:3000"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    environment:
      - MONGODB_URL=mongodb://host.docker.internal:27017,host.docker.internal:27018,host.docker.internal:27019/?replicaSet=rs0
      - MONGODB_DB=stockmarket
      - MONGODB_COLLECTION=stocks
      - MONGO_INITDB_DATABASE=stockmarket
      - NODE_ENV=development
      - PORT=3000
  stock-liveview-master2:
    build: ./stock-liveview-master
    ports:
      - "3001:3001"
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    environment:
      - MONGODB_URL=mongodb://host.docker.internal:27017,host.docker.internal:27018,host.docker.internal:27019/?replicaSet=rs0
      - MONGODB_DB=stockmarket
      - MONGODB_COLLECTION=stocks
      - MONGO_INITDB_DATABASE=stockmarket
      - NODE_ENV=development
      - PORT=3001